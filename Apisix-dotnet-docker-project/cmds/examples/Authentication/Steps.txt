1. First, add the Microsoft.AspNetCore.Authentication.JwtBearer package to your project:
	- dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer

2. Create a controller called TokenController.

3. Set the JWT validation middleware in your Startup.cs file.

4. Create an API endpoint that requires JWT validation. For example, an endpoint in WeathersController.

5. Create upstream
    curl http://127.0.0.1:9080/apisix/admin/upstreams/1 \
    -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \
    -X PUT -d '{
        "type": "roundrobin",
        "nodes": {
            "127.0.0.1:1980": 1
        }
    }'

6. Use the jwt-auth plugin to enable JWT authentication in APISIX and create your route:
	curl http://127.0.0.1:9080/apisix/admin/routes/1 \
    -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \
    -X PUT -d '{
        "uri": "/api/weathers",
        "methods": ["GET"],
        "upstream_id": "1",
        "plugins": {
            "jwt-auth": {}
        }
    }'

    curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "uri": "/api/weathers",
    "upstream": {
        "type": "roundrobin",
        "nodes": {
            "127.0.0.1:5000": 1
        }
    },
    "plugins": {
        "jwt-auth": {}
    }
}'


7. Create Consumer:
    curl http://127.0.0.1:9080/apisix/admin/consumers -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '{
    "username": "user1",
    "plugins": {
        "jwt-auth": {
            "key": "user-key",
            "secret": "my_super_secret_key_12345"
            }
        }
    }'


8. JWT Token Alma:
    curl -v https://localhost:5001/api/token --insecure

9. Authorized Request Submission with JWT Token:
    curl -v -H "Authorization: Bearer <your-token>" --insecure https://localhost:5001/api/weathers


